{"version":3,"file":"refine-directus.cjs.production.min.js","sources":["../src/dataProvider.ts","../src/helpers/auth.ts","../src/helpers/utility.ts"],"sourcesContent":["// @ts-nocheck\nimport {\n    authentication,\n    createDirectus,\n    createItem,\n    createItems,\n    deleteItem,\n    deleteItems,\n    readItem,\n    readItems,\n    rest,\n    updateCollection,\n    updateItem,\n    updateItems,\n    withToken,\n} from \"@directus/sdk\";\nimport {\n    BaseKey,\n    ConditionalFilter,\n    CrudFilter,\n    CrudFilters,\n    CrudSorting,\n    DataProvider,\n    LogicalFilter,\n} from \"@refinedev/core\";\n\nconst operators = {\n    eq: \"_eq\",\n    ne: \"_neq\",\n    lt: \"_lt\",\n    gt: \"_gt\",\n    lte: \"_lte\",\n    gte: \"_gte\",\n    in: \"_in\",\n    nin: \"_nin\",\n    contains: \"_contains\",\n    containss: \"_icontains\",\n    ncontains: \"_ncontains\",\n    ncontainss: undefined,\n    null: \"_null\",\n    nnull: \"_nnull\",\n    between: \"_between\",\n    nbetween: \"_nbetween\",\n    startswith: \"_starts_with\",\n    startswiths: undefined,\n    nstartswith: \"_nstarts_with\",\n    nstartswiths: undefined,\n    endswith: \"_ends_with\",\n    endswiths: undefined,\n    nendswith: \"_nends_with\",\n    nendswiths: undefined,\n    or: \"_or\",\n    and: \"_and\",\n};\n\nconst strToObj = (str: string, val: any) => {\n    var i: number,\n        obj = {},\n        strarr = str.split(\".\");\n    var x: any = obj;\n    for (i = 0; i < strarr.length - 1; i++) {\n        x = x[strarr[i]] = {};\n    }\n    x[strarr[i]] = val;\n    return obj;\n};\n\nconst generateSort = (sort?: CrudSorting) => {\n    const _sort: string[] = [];\n\n    if (sort) {\n        sort.map((item) => {\n            if (item.order) {\n                item.order === \"desc\" ? _sort.push(`-${item.field}`) : _sort.push(`${item.field}`);\n            }\n        });\n    }\n\n    return _sort;\n};\n\nconst generateFilter = (filters?: CrudFilters) => {\n    const queryFilters: { [key: string]: any } = {};\n    let search: string = \"\";\n    if (filters) {\n        queryFilters[\"_and\"] = [];\n        filters.map((filter) => {\n            if (filter.operator !== \"or\" && filter.operator !== \"and\" && \"field\" in filter) {\n                const { field, operator, value } = filter;\n\n                if (value) {\n                    if (field === \"search\") {\n                        search = value;\n                    } else {\n                        let logicalFilter = generateLogicalFilter(filter);\n                        logicalFilter && queryFilters[\"_and\"].push(logicalFilter);\n                    }\n                }\n            } else {\n                let conditionalFilter = generateConditionalFilter(filter);\n                conditionalFilter && queryFilters[\"_and\"].push(conditionalFilter);\n            }\n        });\n    }\n\n    return { search: search, filters: queryFilters };\n};\n\n//Function to handle logical filters\nconst generateLogicalFilter = (item?: LogicalFilter) => {\n    if (item === undefined) return null;\n\n    const { field, operator, value } = item;\n    const directusOperator = operators[operator];\n    let queryField = `${field}.${directusOperator}`;\n    let filterObj = strToObj(queryField, value);\n\n    return filterObj;\n};\n\n//Function to handle conditional filters\nconst generateConditionalFilter = (item?: ConditionalFilter) => {\n    if (item === undefined) return null;\n\n    const { operator, value } = item;\n    const directusOperator = operators[operator];\n\n    const conditionalFilters: { [key: string]: any } = {};\n    conditionalFilters[directusOperator] = [];\n\n    value.map((item) => {\n        if (\"field\" in item) {\n            let logicalFilter = generateLogicalFilter(item);\n            logicalFilter && conditionalFilters[directusOperator].push(logicalFilter);\n        } else {\n            let conditionalFilter = generateConditionalFilter(item);\n            conditionalFilter && conditionalFilters[directusOperator].push(conditionalFilter);\n        }\n    });\n\n    return conditionalFilters;\n};\n\nexport const dataProvider = (directusClient: any): DataProvider => ({\n    getList: async ({ resource, pagination, filters, sorters, meta }) => {\n        const current = pagination?.current || 1;\n        const pageSize = pagination?.pageSize || 50;\n\n        const _sort = generateSort(sorters);\n        const paramsFilters = generateFilter(filters);\n\n        let status: any = { status: { _neq: \"archived\" } };\n        let fields: any = meta?.fields ? meta.fields : [\"*\"];\n\n        //Delete fields from meta\n        delete meta?.fields;\n\n        if (meta?.archived === true) {\n            status = {};\n        }\n\n        let search = {};\n        if (paramsFilters.search) {\n            search = { search: paramsFilters.search };\n        }\n\n        let params: any = {\n            ...search,\n            filter: {\n                ...paramsFilters.filters,\n                ...status,\n            },\n            meta: \"*\",\n            page: current,\n            limit: pageSize,\n            ...meta,\n        };\n\n        let sortString: any = null;\n        if (sorters && sorters.length > 0) {\n            sortString = _sort.join(\",\");\n        }\n\n        if (sortString) {\n            params[\"sort\"] = sortString;\n        }\n\n        try {\n            //const response: any = await directus.readByQuery(params);\n\n            const response: any = await directusClient.request(readItems(resource, { ...params, ...fields }));\n            const total = await directusClient.request(\n                readItems(resource, { ...params, ...{ \"aggregate[countDistinct]\": [\"id\"] } })\n            );\n\n            return {\n                data: response,\n                total: total[0]?.countDistinct?.id ?? 0,\n            };\n        } catch (e) {\n            console.log(e);\n            throw new Error(e.errors && e.errors[0] && e.errors[0].message);\n        }\n    },\n\n    getMany: async ({ resource, ids, meta }) => {\n        let fields: any = meta?.fields ? meta.fields : [\"*\"];\n\n        //Delete fields from meta\n        delete meta?.fields;\n\n        let params: any = {\n            filter: {\n                id: { _in: ids },\n            },\n            ...meta,\n        };\n\n        try {\n            const response: any = await directusClient.request(readItems(resource, { ...params, ...fields }));\n            const total = await directusClient.request(\n                readItems(resource, { ...params, ...{ \"aggregate[countDistinct]\": [\"id\"] } })\n            );\n\n            return {\n                data: response,\n                total: total[0]?.countDistinct?.id ?? 0,\n            };\n        } catch (e) {\n            console.log(e);\n            throw new Error(e.errors && e.errors[0] && e.errors[0].message);\n        }\n    },\n\n    create: async ({ resource, variables, meta }) => {\n        let params: any = {\n            ...variables,\n            ...meta,\n        };\n\n        try {\n            const response: any = await directusClient.request(createItem(resource, params));\n\n            return {\n                data: response,\n            };\n        } catch (e) {\n            console.log(e);\n            throw new Error(e.errors && e.errors[0] && e.errors[0].message);\n        }\n    },\n\n    update: async ({ resource, id, variables, meta }) => {\n        let params: any = {\n            ...variables,\n            ...meta,\n        };\n\n        try {\n            const response: any = await directusClient.request(updateItem(resource, id, params));\n\n            return {\n                data: response,\n            };\n        } catch (e) {\n            console.log(e);\n            throw new Error(e.errors && e.errors[0] && e.errors[0].message);\n        }\n    },\n\n    updateMany: async ({ resource, ids, variables, meta }) => {\n        let idsFormatted: any = ids;\n\n        let params: any = {\n            ...variables,\n            ...meta,\n        };\n\n        try {\n            const response: any = await directusClient.request(updateItems(resource, idsFormatted, params));\n\n            return {\n                data: response,\n            };\n        } catch (e) {\n            console.log(e);\n            throw new Error(e.errors && e.errors[0] && e.errors[0].message);\n        }\n    },\n\n    createMany: async ({ resource, variables, meta }) => {\n        let params: any = {\n            ...variables,\n            ...meta,\n        };\n\n        try {\n            const response: any = await directusClient.request(createItems(resource, params));\n\n            return {\n                data: response,\n            };\n        } catch (e) {\n            console.log(e);\n            throw new Error(e.errors && e.errors[0] && e.errors[0].message);\n        }\n    },\n\n    getOne: async ({ resource, id, meta }) => {\n        let params: any = {\n            ...meta,\n        };\n\n        try {\n            const response: any = await directusClient.request(readItem(resource, id, params));\n\n            return {\n                data: response,\n            };\n        } catch (e) {\n            console.log(e);\n            throw new Error(e.errors && e.errors[0] && e.errors[0].message);\n        }\n    },\n\n    deleteOne: async ({ resource, id, meta }) => {\n        try {\n            if (meta && meta.deleteType === \"archive\") {\n                let params: any = {\n                    status: \"archived\",\n                    ...meta,\n                };\n\n                const response: any = await directusClient.request(updateItem(resource, id, params));\n\n                return {\n                    data: response,\n                };\n            } else {\n                const response: any = await directusClient.request(deleteItem(resource, id));\n\n                return {\n                    data: response,\n                };\n            }\n        } catch (e) {\n            console.log(e);\n            throw new Error(e.errors && e.errors[0] && e.errors[0].message);\n        }\n    },\n\n    deleteMany: async ({ resource, ids, meta }) => {\n        try {\n            let idsFormatted: any = ids;\n\n            if (meta && meta.deleteType === \"archive\") {\n                let params: any = {\n                    status: \"archived\",\n                    ...meta,\n                };\n\n                const response: any = await directusClient.request(updateItems(resource, idsFormatted, params));\n\n                return {\n                    data: response,\n                };\n            } else {\n                const response: any = await directusClient.request(deleteItems(resource, idsFormatted));\n\n                return {\n                    data: response.data,\n                };\n            }\n        } catch (e) {\n            console.log(e);\n            throw new Error(e.errors && e.errors[0] && e.errors[0].message);\n        }\n    },\n\n    getApiUrl: () => {\n        const url: any = directusClient.url;\n        return url;\n    },\n\n    custom: async ({ url, method, filters, sorters, payload, query, headers }) => {\n        let response: any;\n        switch (method) {\n            case \"put\":\n                response = await directusClient.request(() => ({\n                    path: url,\n                    method: \"PUT\",\n                    body: JSON.stringify(payload),\n                    params: query as any,\n                }));\n\n                break;\n            case \"post\":\n                response = await directusClient.request(() => ({\n                    path: url,\n                    method: \"POST\",\n                    body: JSON.stringify(payload),\n                    params: query as any,\n                }));\n                break;\n            case \"patch\":\n                response = await directusClient.request(() => ({\n                    path: url,\n                    method: \"PATCH\",\n                    body: JSON.stringify(payload),\n                    params: query as any,\n                }));\n                break;\n            case \"delete\":\n                response = await directusClient.request(() => ({\n                    path: url,\n                    method: \"DELETE\",\n                    body: payload as any,\n                    params: query as any,\n                }));\n                break;\n            default:\n                response = await directusClient.request(() => ({\n                    path: \"url\",\n                    method: GET,\n                    params: query as any,\n                }));\n                break;\n        }\n\n        return {\n            ...response,\n            data: response.data,\n        };\n    },\n});\n","//@ts-nocheck\nimport { authentication, createDirectus, readMe, rest, staticToken } from \"@directus/sdk\";\n\nexport const AuthHelper = (directusClient: any) => {\n\n    return {\n        login: async (identifier: string, password: string) => {\n            let response = await directusClient.login(identifier, password, { mode: \"json\" });\n\n            return response;\n        },\n        me: async (metaData: {}) => {\n            let me = await directusClient.request(readMe(metaData));\n            return me;\n        },\n        setToken: async (token: string) => {\n            await directusClient.with(staticToken(token));\n        },\n        getToken: () => {\n            return directusClient.getToken();\n        },\n        logout: async () => {\n            return await directusClient.logout();\n        },\n    };\n};\n","//@ts-nocheck\nimport { useState } from \"react\";\nimport { uploadFiles } from \"@directus/sdk\";\n\nexport interface MediaConfig {\n    maxCount: number;\n    name: string;\n    multiple: boolean;\n    normalize?: (item: any) => any;\n};\n\nexport interface ValuePropsConfig {\n    data: any;\n    imageUrl: string;\n    getFileUrl?: ((item: any) => any);\n    getFileTitle?: ((item: any) => any);\n};\n\n\nexport const getValueProps = (valueProps: ValuePropsConfig) => {\n    const { data, imageUrl, getFileUrl, getFileTitle } = valueProps;\n\n    if (!data) {\n        return { fileList: [] };\n    }\n\n    const files = {\n        file: data.file,\n        fileList:\n            data.fileList ??\n            (Array.isArray(data) ? data : [data]).map((item: any) => {\n\n                const file: any = {\n                    name: getFileTitle ? getFileTitle(item) : item.title,\n                    url: getFileUrl ? getFileUrl(item) : `${imageUrl}assets/${item.id}`,\n                    percent: item.percent,\n                    size: item.filesize,\n                    status: 'done',\n                    type: item.type,\n                    uid: item.id\n                };\n\n                return file;\n\n            }),\n    };\n\n    return files;\n};\n\n\nexport const useDirectusUpload = (mediaConfigList: MediaConfig[], directusClient: any) => {\n    const [uploadedFileIds] = useState<string[]>([]);\n    const [fileList, setFileList] = useState<any[]>([]);\n\n    const beforeUpload = (_file: any, files: any[], maxCount: number): boolean => {\n        const totalFiles = fileList.length;\n        const filesCount = files.length;\n\n        if (totalFiles + filesCount > maxCount) {\n            const excessFileCount = totalFiles + filesCount - maxCount;\n            // convert negative\n            const deleteItemCount = excessFileCount - excessFileCount * 2;\n            files.splice(deleteItemCount);\n        }\n\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        setFileList([...fileList, ...files]);\n\n        return true;\n    };\n\n\n    const customRequest = async ({\n        file,\n        onError,\n        onSuccess,\n    }: any) => {\n        try {\n            const form = new FormData();\n            form.append(\"file\", file);\n\n            const data = await directusClient.request(uploadFiles(form));\n            onSuccess?.({ data }, new XMLHttpRequest());\n        } catch (error) {\n            onError?.(new Error(\"Upload Error\"));\n        }\n    };\n\n\n    const getUploadProps = (fieldName: string) => {\n\n        const mediaConfig = mediaConfigList.filter((config: any) => config.name === fieldName)[0];\n\n        return {\n            uploadedFileIds,\n            beforeUpload: (_file: any, files: any[]) => beforeUpload(_file, files, mediaConfig.maxCount),\n            fileList,\n            maxCount: mediaConfig.maxCount,\n            customRequest,\n        };\n    };\n\n    return getUploadProps;\n};\n\n\nexport const mediaUploadMapper = (params: any, mediaConfigList: MediaConfig[]) => {\n\n    for (const item of Object.keys(params)) {\n        if (params[item]) {\n            const param = params[item].fileList;\n            const isMediaField = Array.isArray(param);\n            if (isMediaField) {\n                const mediaConfig = mediaConfigList.filter((config: any) => config.name === item)[0];\n                const ids = [];\n                for (const key of Object.keys(param)) {\n                    if (param[key].response) {\n                        if (mediaConfig.normalize) {\n                            ids.push(mediaConfig.normalize(param[key].response.data.id));\n                        }\n                        else {\n                            ids.push(param[key].response.data.id);\n                        }\n                    } else {\n                        ids.push(param[key].uid);\n                    }\n                }\n\n                if (mediaConfig.multiple) {\n                    params[item] = ids;\n                }\n                else {\n                    params[item] = ids[0] ? ids[0] : null;\n                }\n            }\n        }\n    }\n\n    return params;\n};"],"names":["operators","eq","ne","lt","gt","lte","gte","in","nin","contains","containss","ncontains","ncontainss","undefined","null","nnull","between","nbetween","startswith","startswiths","nstartswith","nstartswiths","endswith","endswiths","nendswith","nendswiths","or","and","generateSort","sort","_sort","map","item","order","push","field","generateFilter","filters","queryFilters","search","filter","operator","value","logicalFilter","generateLogicalFilter","conditionalFilter","generateConditionalFilter","str","val","i","obj","strarr","split","x","length","strToObj","directusOperator","conditionalFilters","directusClient","login","_login","_asyncToGenerator","_regeneratorRuntime","mark","_callee","identifier","password","wrap","_context","prev","next","mode","abrupt","sent","stop","_x","_x2","apply","arguments","me","_me","_callee2","metaData","_context2","request","readMe","_x3","setToken","_setToken","_callee3","token","_context3","staticToken","_x4","getToken","logout","_logout","_callee4","_context4","getList","_getList","_ref","resource","pagination","sorters","meta","current","pageSize","paramsFilters","status","fields","params","sortString","_total$0$countDistinc","_total$","response","_neq","archived","_extends","page","limit","join","readItems","aggregate[countDistinct]","data","total","countDistinct","id","t0","console","log","Error","errors","message","getMany","_getMany","_ref2","ids","_total$0$countDistinc2","_total$2","_in","create","_create","_ref3","variables","createItem","update","_update","_ref4","updateItem","updateMany","_updateMany","_callee5","_ref5","idsFormatted","_context5","updateItems","_x5","createMany","_createMany","_callee6","_ref6","_context6","createItems","_x6","getOne","_getOne","_callee7","_ref7","_context7","readItem","_x7","deleteOne","_deleteOne","_callee8","_ref8","_context8","deleteType","deleteItem","_x8","deleteMany","_deleteMany","_callee9","_ref9","_context9","deleteItems","_x9","getApiUrl","url","custom","_custom","_callee10","_ref10","payload","query","_context10","method","path","body","JSON","stringify","GET","_x10","valueProps","imageUrl","getFileUrl","getFileTitle","file","fileList","_data$fileList","Array","isArray","name","title","percent","size","filesize","type","uid","mediaConfigList","_Object$keys","_i","param","mediaConfig","config","_i2","_Object$keys2","Object","keys","key","normalize","multiple","_loop","uploadedFileIds","useState","_useState2","setFileList","customRequest","onError","onSuccess","form","FormData","append","uploadFiles","XMLHttpRequest","fieldName","beforeUpload","_file","files","maxCount","totalFiles","filesCount","excessFileCount","splice","concat"],"mappings":"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"}